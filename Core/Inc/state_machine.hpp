#pragma once
#include "ST-LIB.hpp"
using namespace std::chrono_literals;

#include "BMSL/Comms.hpp"
#include "BMSL/DCLV/DCLV.hpp"
#include "BMSL/Data.hpp"

// AUTOGENERATED CODE, DO NOT EDIT MANUALLY

class BMSL_SM {
   public:
    // ------TRANSITIONS---------

    static bool connecting_to_operational() {
        return Comms::control_station->is_connected();
    }
    static bool operational_to_fault() {
        return !Comms::control_station->is_connected();
    }

    static bool idle_to_charging() {
        return true;  // CHANGE THIS TO A REAL CONDITION
    }

    static bool charging_to_idle() {
        return true;  // CHANGE THIS TO A REAL CONDITION
    }

    // ------BATTERY READING------

    bool battery_reading = false;

    void battery_reading_callback() { battery_reading = true; }

    void read_batteries() {
        if (battery_reading) {
            Data::read();
            battery_reading = false;
        }
    }

    // ------DCLV READING------

    bool dclv_reading = false;

    void dclv_reading_callback() { dclv_reading = true; }

    void read_dclv() {
        if (dclv_reading) {
            DCLV::read_sensors();
            dclv_reading = false;
        }
    }

    // ------PACKET SENDING------

    bool packet_sending = false;
    void packet_sending_callback() { packet_sending = true; }

    void send_packets() {
        if (packet_sending) {
            Comms::send_packets();
            packet_sending = false;
        }
    }

    // ------DCLV ORDERS------
    void check_orders() {
        if (Comms::received_turn_on_pfm) {
            DCLV::turn_on_pfm();
            Comms::received_turn_on_pfm = false;
        }
        if (Comms::received_turn_off_pfm) {
            DCLV::turn_off_pfm();
            Comms::received_turn_off_pfm = false;
        }
        if (Comms::received_set_pfm_frequency) {
            DCLV::set_pfm_frequency(DCLV::frequency);
            Comms::received_set_pfm_frequency = false;
        }
        if (Comms::received_set_pfm_dead_time) {
            DCLV::set_pfm_dead_time(DCLV::dead_time);
            Comms::received_set_pfm_dead_time = false;
        }
    }

    StateMachine general_sm;
    StateMachine operational_sm;

    enum general_states : uint8_t {
        CONNECTING,
        OPERATIONAL,
        FAULT,
    };

    enum operational_states : uint8_t { IDLE, CHARGING };

    BMSL_SM() {
        general_sm = StateMachine(general_states::CONNECTING);
        operational_sm = StateMachine(operational_states::IDLE);

        general_sm.add_state(general_states::OPERATIONAL);
        general_sm.add_state(general_states::FAULT);
        operational_sm.add_state(operational_states::CHARGING);
        general_sm.add_state_machine(operational_sm,
                                     general_states::OPERATIONAL);

        general_sm.add_transition(general_states::CONNECTING,
                                  general_states::OPERATIONAL,
                                  connecting_to_operational);
        general_sm.add_transition(general_states::OPERATIONAL,
                                  general_states::FAULT, operational_to_fault);
        operational_sm.add_transition(operational_states::IDLE,
                                      operational_states::CHARGING,
                                      idle_to_charging);
        operational_sm.add_transition(operational_states::CHARGING,
                                      operational_states::IDLE,
                                      charging_to_idle);

        general_sm.add_low_precision_cyclic_action(
            [&]() { battery_reading_callback(); }, 100ms,
            general_states::CONNECTING);
        general_sm.add_low_precision_cyclic_action(
            [&]() { dclv_reading_callback(); }, 100ms,
            general_states::CONNECTING);
        general_sm.add_low_precision_cyclic_action(
            [&]() { packet_sending_callback(); }, 100ms,
            general_states::CONNECTING);

        general_sm.add_low_precision_cyclic_action(
            [&]() { battery_reading_callback(); }, 100ms,
            general_states::OPERATIONAL);
        general_sm.add_low_precision_cyclic_action(
            [&]() { dclv_reading_callback(); }, 100ms,
            general_states::OPERATIONAL);
        general_sm.add_low_precision_cyclic_action(
            [&]() { packet_sending_callback(); }, 100ms,
            general_states::OPERATIONAL);
        general_sm.add_enter_action([&]() { Data::LED_Operational->turn_on(); },
                                    general_states::OPERATIONAL);
        general_sm.add_exit_action([&]() { Data::LED_Operational->turn_off(); },
                                   general_states::OPERATIONAL);

        general_sm.add_low_precision_cyclic_action(
            [&]() { battery_reading_callback(); }, 100ms,
            general_states::FAULT);
        general_sm.add_low_precision_cyclic_action(
            [&]() { dclv_reading_callback(); }, 100ms, general_states::FAULT);
        general_sm.add_low_precision_cyclic_action(
            [&]() { packet_sending_callback(); }, 100ms, general_states::FAULT);
        general_sm.add_enter_action([&]() { Data::LED_Fault->turn_on(); },
                                    general_states::FAULT);
        general_sm.add_exit_action([&]() { Data::LED_Fault->turn_off(); },
                                   general_states::FAULT);
    }
};