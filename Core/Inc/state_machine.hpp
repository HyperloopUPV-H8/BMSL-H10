#pragma once
#include "ST-LIB.hpp"
using namespace std::chrono_literals;

#include "BMSL/Comms.hpp"
#include "BMSL/Data.hpp"
#include "BMSL/DCLV/DCLV.hpp"

// AUTOGENERATED CODE, DO NOT EDIT MANUALLY

class BMSL_SM{

    public:

    static bool connecting_to_operational(){
        if(Comms::master_connection == Comms::Master::CONNECTED){
            return Comms::VCU->is_connected();
        }
        else{
            return Comms::control_station->is_connected();
        }
    }
    static bool operational_to_fault(){
        if(Comms::master_connection == Comms::Master::CONNECTED){
            return !Comms::VCU->is_connected();
        }
        else{
            return !Comms::control_station->is_connected();
        }
    }

    // ------BATTERY READING------

    bool battery_reading = false;

    void battery_reading_callback(){
        battery_reading = true;
    }

    void read_batteries(){
        if(battery_reading){
            Data::read();
            battery_reading = false;
        }
    }

    // ------DCLV READING------

    bool dclv_reading = false;

    void dclv_reading_callback(){
        dclv_reading = true;
    }

    void read_dclv(){
        if(dclv_reading){
            DCLV::read_sensors();
            dclv_reading = false;
        }
    }

    // ------PACKET SENDING------

    bool packet_sending  = false;
    void packet_sending_callback(){
        packet_sending = true;
    }
    
    void send_packets(){
        if(packet_sending){
            Comms::send_packets();
            packet_sending = false;
        }
    }

    // ------DCLV ORDERS------
    void check_orders(){
        if(Comms::received_turn_on_pfm){
            DCLV::turn_on_pfm();
            Comms::received_turn_on_pfm = false;
        }
        if(Comms::received_turn_off_pfm){
            DCLV::turn_off_pfm();
            Comms::received_turn_off_pfm = false;
        }
        if(Comms::received_set_pfm_frequency){
            DCLV::set_pfm_frequency(DCLV::frequency);
            Comms::received_set_pfm_frequency = false;
        }
        if(Comms::received_set_pfm_dead_time){
            DCLV::set_pfm_dead_time(DCLV::dead_time);
            Comms::received_set_pfm_dead_time = false;
        }
    }


    StateMachine BMSL_SM_State_Machine;

    enum BMSL_SMStates {
        CONNECTING,
        OPERATIONAL,
        FAULT,
    };

    BMSL_SM(){

        BMSL_SM_State_Machine = StateMachine(BMSL_SMStates::CONNECTING);

        BMSL_SM_State_Machine.add_state(BMSL_SMStates::OPERATIONAL);
        BMSL_SM_State_Machine.add_state(BMSL_SMStates::FAULT);

        BMSL_SM_State_Machine.add_transition(BMSL_SMStates::CONNECTING, BMSL_SMStates::OPERATIONAL, connecting_to_operational);
        BMSL_SM_State_Machine.add_transition(BMSL_SMStates::OPERATIONAL, BMSL_SMStates::FAULT, operational_to_fault);

        BMSL_SM_State_Machine.add_low_precision_cyclic_action([&](){ battery_reading_callback(); }, 100ms, BMSL_SMStates::CONNECTING);
        BMSL_SM_State_Machine.add_low_precision_cyclic_action([&](){ dclv_reading_callback(); }, 100ms, BMSL_SMStates::CONNECTING);
        BMSL_SM_State_Machine.add_low_precision_cyclic_action([&](){ packet_sending_callback(); }, 100ms, BMSL_SMStates::CONNECTING);

        BMSL_SM_State_Machine.add_low_precision_cyclic_action([&](){ battery_reading_callback(); }, 100ms, BMSL_SMStates::OPERATIONAL);
        BMSL_SM_State_Machine.add_low_precision_cyclic_action([&](){ dclv_reading_callback(); }, 100ms, BMSL_SMStates::OPERATIONAL);
        BMSL_SM_State_Machine.add_low_precision_cyclic_action([&](){ packet_sending_callback(); }, 100ms, BMSL_SMStates::OPERATIONAL);
        BMSL_SM_State_Machine.add_enter_action([&](){ Data::LED_Operational->turn_on(); }, BMSL_SMStates::OPERATIONAL);
        BMSL_SM_State_Machine.add_exit_action([&](){ Data::LED_Operational->turn_off(); }, BMSL_SMStates::OPERATIONAL);

        BMSL_SM_State_Machine.add_low_precision_cyclic_action([&](){ battery_reading_callback(); }, 100ms, BMSL_SMStates::FAULT);
        BMSL_SM_State_Machine.add_low_precision_cyclic_action([&](){ dclv_reading_callback(); }, 100ms, BMSL_SMStates::FAULT);
        BMSL_SM_State_Machine.add_low_precision_cyclic_action([&](){ packet_sending_callback(); }, 100ms, BMSL_SMStates::FAULT);
        BMSL_SM_State_Machine.add_enter_action([&](){ Data::LED_Fault->turn_on(); }, BMSL_SMStates::FAULT);
        BMSL_SM_State_Machine.add_exit_action([&](){ Data::LED_Fault->turn_off(); }, BMSL_SMStates::FAULT);

    }

};